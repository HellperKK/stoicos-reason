// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Type$ReactTemplate = require("./Type.bs.js");

function cust_print(tokens) {
  var chaines = List.map(Type$ReactTemplate.to_string, tokens);
  var chaine = $$String.concat(" ", chaines);
  Type$ReactTemplate.sortie[0] = Type$ReactTemplate.sortie[0] + chaine;
  return /* Chaine */Block.__(3, [chaine]);
}

function cust_add(tokens) {
  var result = List.fold_left((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), 0, List.map(Type$ReactTemplate.to_int, tokens));
  return /* Entier */Block.__(0, [result]);
}

function cust_times(tokens) {
  var result = List.fold_left(Caml_int32.imul, 1, List.map(Type$ReactTemplate.to_int, tokens));
  return /* Entier */Block.__(0, [result]);
}

function cust_rem(tokens) {
  if (tokens) {
    var result = List.fold_left((function (prim, prim$1) {
            return prim - prim$1 | 0;
          }), Type$ReactTemplate.to_int(tokens[0]), List.map(Type$ReactTemplate.to_int, tokens[1]));
    return /* Entier */Block.__(0, [result]);
  } else {
    return /* Unit */0;
  }
}

function cust_div(tokens) {
  if (tokens) {
    var result = List.fold_left(Caml_int32.div, Type$ReactTemplate.to_int(tokens[0]), List.map(Type$ReactTemplate.to_int, tokens[1]));
    return /* Entier */Block.__(0, [result]);
  } else {
    return /* Unit */0;
  }
}

function cust_mod(tokens) {
  if (tokens) {
    var result = List.fold_left(Caml_int32.mod_, Type$ReactTemplate.to_int(tokens[0]), List.map(Type$ReactTemplate.to_int, tokens[1]));
    return /* Entier */Block.__(0, [result]);
  } else {
    return /* Unit */0;
  }
}

Hashtbl.add(Type$ReactTemplate.vars, "print", /* NativeFonction */Block.__(10, [cust_print]));

Hashtbl.add(Type$ReactTemplate.vars, "+", /* NativeFonction */Block.__(10, [cust_add]));

Hashtbl.add(Type$ReactTemplate.vars, "*", /* NativeFonction */Block.__(10, [cust_times]));

Hashtbl.add(Type$ReactTemplate.vars, "-", /* NativeFonction */Block.__(10, [cust_rem]));

Hashtbl.add(Type$ReactTemplate.vars, "/", /* NativeFonction */Block.__(10, [cust_div]));

Hashtbl.add(Type$ReactTemplate.vars, "%", /* NativeFonction */Block.__(10, [cust_mod]));

var vars = Type$ReactTemplate.vars;

var sortie = Type$ReactTemplate.sortie;

var to_int = Type$ReactTemplate.to_int;

var to_float = Type$ReactTemplate.to_float;

var to_char = Type$ReactTemplate.to_char;

var to_string = Type$ReactTemplate.to_string;

var to_function = Type$ReactTemplate.to_function;

var get_var = Type$ReactTemplate.get_var;

var run_fun = Type$ReactTemplate.run_fun;

exports.vars = vars;
exports.sortie = sortie;
exports.to_int = to_int;
exports.to_float = to_float;
exports.to_char = to_char;
exports.to_string = to_string;
exports.to_function = to_function;
exports.get_var = get_var;
exports.run_fun = run_fun;
exports.cust_print = cust_print;
exports.cust_add = cust_add;
exports.cust_times = cust_times;
exports.cust_rem = cust_rem;
exports.cust_div = cust_div;
exports.cust_mod = cust_mod;
/*  Not a pure module */
