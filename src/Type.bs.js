// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Utils$ReactTemplate = require("./Utils.bs.js");

var vars = /* record */[/* contents : :: */[
    Hashtbl.create(undefined, 100),
    /* [] */0
  ]];

function get_value(name) {
  return List.fold_left((function (memo, value) {
                var match = Hashtbl.mem(value, name) && memo === /* Unit */0;
                if (match) {
                  return Hashtbl.find(value, name);
                } else {
                  return memo;
                }
              }), /* Unit */0, vars[0]);
}

function add_stack() {
  var ancien = vars[0];
  vars[0] = /* :: */[
    Hashtbl.create(undefined, 100),
    ancien
  ];
  return /* () */0;
}

function remove_stack() {
  var match = vars[0];
  var tmp;
  if (match) {
    var tail = match[1];
    tmp = tail ? tail : /* :: */[
        match[0],
        /* [] */0
      ];
  } else {
    tmp = /* [] */0;
  }
  vars[0] = tmp;
  return /* () */0;
}

function get_stack() {
  var match = vars[0];
  if (match) {
    return match[0];
  } else {
    return Hashtbl.create(undefined, 100);
  }
}

function set_value(name, value) {
  var match = vars[0];
  if (match) {
    return Hashtbl.replace(match[0], name, value);
  } else {
    return /* () */0;
  }
}

var sortie = /* record */[/* contents */""];

function to_int(tok) {
  if (typeof tok === "number") {
    return 0;
  } else {
    switch (tok.tag | 0) {
      case 1 : 
          return tok[0] | 0;
      case 0 : 
      case 2 : 
          return tok[0];
      case 3 : 
      case 4 : 
          return Utils$ReactTemplate.super_int_of_string(tok[0]);
      default:
        return 0;
    }
  }
}

function to_float(tok) {
  if (typeof tok === "number") {
    return 0.0;
  } else {
    switch (tok.tag | 0) {
      case 1 : 
          return tok[0];
      case 0 : 
      case 2 : 
          return tok[0];
      case 3 : 
      case 4 : 
          return Utils$ReactTemplate.super_float_of_string(tok[0]);
      default:
        return 0.0;
    }
  }
}

function to_char(tok) {
  if (typeof tok === "number") {
    return /* " " */32;
  } else {
    switch (tok.tag | 0) {
      case 0 : 
          return Pervasives.char_of_int(tok[0]);
      case 1 : 
          return Pervasives.char_of_int(tok[0] | 0);
      case 2 : 
          return tok[0];
      case 3 : 
      case 4 : 
          return Caml_string.get(tok[0], 0);
      default:
        return /* " " */32;
    }
  }
}

function to_string(tok) {
  if (typeof tok === "number") {
    return "";
  } else {
    switch (tok.tag | 0) {
      case 0 : 
          return String(tok[0]);
      case 1 : 
          return Pervasives.string_of_float(tok[0]);
      case 2 : 
          return $$String.make(1, tok[0]);
      case 3 : 
      case 4 : 
          return tok[0];
      case 6 : 
          return Pervasives.string_of_bool(tok[0]);
      default:
        return "";
    }
  }
}

function to_bool(tok) {
  if (typeof tok === "number") {
    return false;
  } else if (tok.tag === 6) {
    return tok[0];
  } else {
    return true;
  }
}

function to_function(tok) {
  var exit = 0;
  if (typeof tok === "number" || tok.tag !== 11) {
    exit = 1;
  } else {
    return tok[0];
  }
  if (exit === 1) {
    return /* NativeF */Block.__(0, [(function () {
                  return /* Unit */0;
                })]);
  }
  
}

function get_var(tok) {
  if (typeof tok === "number" || tok.tag !== 5) {
    return tok;
  } else {
    return get_value(tok[0]);
  }
}

function run(tokens) {
  if (tokens) {
    var funcb = to_function(get_var(tokens[0]));
    var argsb = List.map((function (x) {
            return get_var(tok_get(x));
          }), tokens[1]);
    return run_fun(funcb, argsb);
  } else {
    return /* Unit */0;
  }
}

function tok_get(token) {
  if (typeof token === "number") {
    return token;
  } else {
    switch (token.tag | 0) {
      case 7 : 
          return run(token[0]);
      case 9 : 
          return /* Tableau */Block.__(10, [List.map((function (tok) {
                            return get_var(tok_get(tok));
                          }), token[0])]);
      default:
        return token;
    }
  }
}

function run_fun(func, args) {
  if (func.tag) {
    return /* Unit */0;
  } else {
    return Curry._1(func[0], args);
  }
}

function tok_calc(token) {
  if (typeof token === "number") {
    return token;
  } else {
    switch (token.tag | 0) {
      case 7 : 
          return run(token[0]);
      case 8 : 
          return List.fold_left((function (_, tok) {
                        return tok_get(tok);
                      }), /* Unit */0, token[0]);
      default:
        return token;
    }
  }
}

exports.vars = vars;
exports.get_value = get_value;
exports.add_stack = add_stack;
exports.remove_stack = remove_stack;
exports.get_stack = get_stack;
exports.set_value = set_value;
exports.sortie = sortie;
exports.to_int = to_int;
exports.to_float = to_float;
exports.to_char = to_char;
exports.to_string = to_string;
exports.to_bool = to_bool;
exports.to_function = to_function;
exports.get_var = get_var;
exports.run = run;
exports.tok_get = tok_get;
exports.tok_calc = tok_calc;
exports.run_fun = run_fun;
/* vars Not a pure module */
