// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function singleton(key, value) {
  return /* Branch */[
          /* tuple */[
            key,
            value
          ],
          /* Leaf */0,
          /* Leaf */0
        ];
}

function mem(key, _hash) {
  while(true) {
    var hash = _hash;
    if (hash) {
      var k = hash[0][0];
      if (Caml_obj.caml_equal(k, key)) {
        return true;
      } else if (Caml_obj.caml_greaterthan(k, key)) {
        _hash = hash[1];
        continue ;
      } else {
        _hash = hash[2];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function find_opt(key, _hash) {
  while(true) {
    var hash = _hash;
    if (hash) {
      var match = hash[0];
      var k = match[0];
      if (Caml_obj.caml_equal(k, key)) {
        return Js_primitive.some(match[1]);
      } else if (Caml_obj.caml_greaterthan(k, key)) {
        _hash = hash[1];
        continue ;
      } else {
        _hash = hash[2];
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

function add(key, value, hash) {
  if (hash) {
    var right = hash[2];
    var left = hash[1];
    var match = hash[0];
    var v = match[1];
    var k = match[0];
    if (Caml_obj.caml_equal(k, key)) {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              left,
              right
            ];
    } else if (Caml_obj.caml_greaterthan(k, key)) {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              add(key, value, left),
              right
            ];
    } else {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              left,
              add(key, value, right)
            ];
    }
  } else {
    return /* Branch */[
            /* tuple */[
              key,
              value
            ],
            /* Leaf */0,
            /* Leaf */0
          ];
  }
}

function replace(key, value, hash) {
  if (hash) {
    var right = hash[2];
    var left = hash[1];
    var match = hash[0];
    var v = match[1];
    var k = match[0];
    if (Caml_obj.caml_equal(k, key)) {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              left,
              right
            ];
    } else if (Caml_obj.caml_greaterthan(k, key)) {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              replace(key, value, left),
              right
            ];
    } else {
      return /* Branch */[
              /* tuple */[
                k,
                v
              ],
              left,
              replace(key, value, right)
            ];
    }
  } else {
    return /* Branch */[
            /* tuple */[
              key,
              value
            ],
            /* Leaf */0,
            /* Leaf */0
          ];
  }
}

function fold_left(_value, func, _hash) {
  while(true) {
    var hash = _hash;
    var value = _value;
    if (hash) {
      var match = hash[0];
      var result = Curry._3(func, value, match[0], match[1]);
      var temp = fold_left(result, func, hash[1]);
      _hash = hash[2];
      _value = temp;
      continue ;
    } else {
      return value;
    }
  };
}

function pairs(hash) {
  return List.rev(fold_left(/* [] */0, (function (memo, k, v) {
                    return /* :: */[
                            /* tuple */[
                              k,
                              v
                            ],
                            memo
                          ];
                  }), hash));
}

function keys(hash) {
  return List.rev(fold_left(/* [] */0, (function (memo, k, _) {
                    return /* :: */[
                            k,
                            memo
                          ];
                  }), hash));
}

function values(hash) {
  return List.rev(fold_left(/* [] */0, (function (memo, _, v) {
                    return /* :: */[
                            v,
                            memo
                          ];
                  }), hash));
}

var class_tables = [
  0,
  0,
  0
];

function test() {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(0);
    var env = CamlinternalOO.new_variable($$class, "");
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], 0);
}

var empty = /* Leaf */0;

exports.empty = empty;
exports.singleton = singleton;
exports.mem = mem;
exports.find_opt = find_opt;
exports.add = add;
exports.replace = replace;
exports.fold_left = fold_left;
exports.pairs = pairs;
exports.keys = keys;
exports.values = values;
exports.test = test;
/* No side effect */
